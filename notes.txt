dataset 1 - co2 emmission
dataset 2 - energy generation 
dataset 3 - renewable resources


relationship:
ds1 is co2 emmision by various fuels whereas ds2 is energy generarion through that resources
so we can compare the resources which are benefecial to the environment


fuels in ds1
Coal (CO)
Natural Gas (NG)
Petroleum (PE)
All Fuels (TO)




fuels in ds2
Coal (COL)
Natural Gas (NG)
Nuclear (NUC)
Petroleum (OIL)
Other (OTH)
Solar (SUN)
Unknown (UNK)
Hydro (WAT)




to fetch data on a regular basis, we can fetch the total from the api and store it in a variable and check everytime if the total records are increased 




task:
api in env
imp of carbon coefficient
store api in vault
new column in billions




carbon coefficient - 
amount of carbon released (usually as CO₂) per unit of energy produced or consumed, particularly for fossil fuels.


emission factor - 
amount of CO₂ or other GHG emissions released per unit of activity or fuel consumption.



analysis - 
1 - 
find co2 emission from ds2 using emsission factor
find actual emission from ds1 and compare
issue - can only compare for the whole us for each year as ds2 doesnt have data based on each state

2 - 
find energy generation of renewable resource over year and find trend

3 - co2 emission by sector and compare with other sectors






import requests
import pandas as pd
from sqlalchemy import create_engine

import secret as secret


def fetch_data(api_url, params, no_of_records=None):
    """
    Fetch data from EIA API

    :param api_url: Provide the base API URL.
    :param params: Provide parameters for the data, e.g., your API key, frequency.
    :param no_of_records: Maximum number of records to fetch (default is None, meaning fetch all records).
    :return: A pandas DataFrame containing the fetched data.
    """
    params['offset'] = 0  
    complete_data = pd.DataFrame()
    total_records_fetched = 0  

    while True:
        response = requests.get(api_url, params=params)
        # response.raise_for_status()
        data = response.json()

        records = data['response']['data']

        if not records:
            break

        df = pd.DataFrame(records)
        complete_data = pd.concat([complete_data, df], ignore_index=True)
        total_records_fetched += len(records)
        params['offset'] += len(records)

        if no_of_records is  not None:
            if total_records_fetched>=no_of_records:
                return complete_data.iloc[:no_of_records]
        

    return complete_data



def mysql_connect(dataframe, table_name):
    """
    Insert DataFrame into MySQL.

    :param dataframe: DataFrame name
    :param table_name: Table name
 
    """
    mysql_connection_string = 'mysql+pymysql://root:root@localhost:3306/eia2'
    engine = create_engine(mysql_connection_string)
 
    dataframe.to_sql(table_name, con=engine, if_exists='replace', index=False)
    print(f"{dataframe} stored in mysql")

base_url = "https://api.eia.gov/v2/"


api1_url = f"{base_url}co2-emissions/co2-emissions-aggregates/data/"
api2_url = f"{base_url}electricity/rto/daily-fuel-type-data/data/"
api3_url = f"{base_url}international/data/"

# print(api1_url)
api3_params = {
    "frequency": "annual",
    "data[0]": "value",
    "facets[productId][]": [116, 33, 37],
    "facets[countryRegionId][]": "USA",
    "api_key":secret.api_key

}
api1_params = {
    "frequency": "annual",
    "data[0]": "value",
    "api_key": secret.api_key
}


api2_params = {
    "frequency": "daily",
    "data[0]": "value",
    "api_key": secret.api_key
}

# print(api_key)
# data_api1 = fetch_data(api1_url, api1_params, no_of_records=20000)
# data_api2 = fetch_data(api2_url, api2_params, no_of_records=20000)  
data_api3 = fetch_data(api3_url, api3_params, no_of_records=20000)

print(data_api3)
# print()

# mysql_connect(data_api1,"df1")
# mysql_connect(data_api2,"df2")
# mysql_connect(data_api3,"df3")

print(secret.api_key)








def case_statement(row):
    if row['value-units'] == "billion metric tons of CO2":
        return row['value'] * 1000 
    else:
        return row["value"]
        
df1['value_in_mmt'] = df1.apply(case_statement, axis=1)







worked on transformation
1 - yearly co2 reduction
2 - capacity increase



$2a$10$fYFlXx8Oz1asHxYJYK3YGef/3Bu46bn.joVPcN7SM5s8FXPMR/ZP.